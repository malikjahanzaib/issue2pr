from flask import Flask, request, jsonify
import hmac
import hashlib
import logging
from github_handler import GitHubHandler
from ai_engine import AIEngine
from config import WEBHOOK_SECRET, validate_config

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
github_handler = GitHubHandler()
ai_engine = AIEngine()

def verify_webhook_signature(payload, signature):
    """Verify the GitHub webhook signature."""
    if not WEBHOOK_SECRET:
        logger.warning("No webhook secret configured, skipping signature verification")
        return True
    
    expected_signature = hmac.new(
        WEBHOOK_SECRET.encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(
        f"sha256={expected_signature}",
        signature
    )

@app.route('/webhook', methods=['POST'])
def webhook():
    """Handle incoming GitHub webhooks."""
    try:
        # Verify webhook signature
        signature = request.headers.get('X-Hub-Signature-256')
        if not verify_webhook_signature(request.data, signature):
            return jsonify({'error': 'Invalid signature'}), 401

        # Parse webhook payload
        payload = request.json
        event = request.headers.get('X-GitHub-Event')

        # Handle issue events
        if event == 'issues':
            handle_issue_event(payload)
        elif event == 'issue_comment':
            handle_issue_comment(payload)

        return jsonify({'status': 'success'}), 200

    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        return jsonify({'error': str(e)}), 500

def handle_issue_event(payload):
    """Handle GitHub issue events."""
    action = payload.get('action')
    issue = payload.get('issue')
    
    if not issue:
        return
    
    issue_number = issue.get('number')
    issue_title = issue.get('title')
    issue_body = issue.get('body')
    
    if action in ['opened', 'labeled']:
        logger.info(f"Processing issue #{issue_number}: {issue_title}")
        process_issue(issue_number, issue_title, issue_body)

def handle_issue_comment(payload):
    """Handle GitHub issue comment events."""
    comment = payload.get('comment')
    issue = payload.get('issue')
    
    if not comment or not issue:
        return
    
    # Check if the comment contains a trigger command
    if '/issue2pr' in comment.get('body', '').lower():
        issue_number = issue.get('number')
        issue_title = issue.get('title')
        issue_body = issue.get('body')
        
        logger.info(f"Processing issue #{issue_number} via comment trigger")
        process_issue(issue_number, issue_title, issue_body)

def process_issue(issue_number, title, body):
    """Process an issue and create a PR with AI-generated changes."""
    try:
        # Generate code changes using AI
        ai_response = ai_engine.generate_code(title, body)
        code_changes = ai_engine.parse_code_changes(ai_response)
        
        if not code_changes:
            logger.warning(f"No code changes generated for issue #{issue_number}")
            return
        
        # Create a new branch
        branch_name = github_handler.create_branch(issue_number)
        
        # Apply code changes
        for change in code_changes:
            github_handler.create_commit(
                branch_name=branch_name,
                file_path=change['file'],
                content=change['content'],
                message=f"Update {change['file']}: {change['explanation']}"
            )
        
        # Create pull request
        pr_title = f"Resolve #{issue_number}: {title}"
        pr_body = f"""This PR resolves issue #{issue_number}

Changes made:
{chr(10).join(f"- {change['file']}: {change['explanation']}" for change in code_changes)}

Generated by Issue2PR Bot using {ai_engine.engine.upper()}
"""
        
        pr = github_handler.create_pull_request(
            issue_number=issue_number,
            branch_name=branch_name,
            title=pr_title,
            body=pr_body
        )
        
        # Update issue status
        github_handler.update_issue_status(issue_number, "PR Created âœ…")
        
        logger.info(f"Successfully created PR #{pr.number} for issue #{issue_number}")
        
    except Exception as e:
        logger.error(f"Error processing issue #{issue_number}: {str(e)}")
        raise

if __name__ == '__main__':
    # Validate configuration
    validate_config()
    
    # Start the Flask application
    app.run(host='0.0.0.0', port=5000) 